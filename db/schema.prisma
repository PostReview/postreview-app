// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  handle          String  @unique
  displayName     String?
  email           String  @unique
  emailIsVerified Boolean @default(false)
  hashedPassword  String?
  role            Role    @default(USER)

  tokens   Token[]
  sessions Session[]
  icon     String?

  author         Author[]
  review         ReviewAnswers[]
  reviewComments ReviewComments[]
  article        Article[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgresql
// enum TokenType {
//   RESET_PASSWORD
// }

model Article {
  id            String           @id @default(uuid())
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  addedBy       User?            @relation(fields: [addedById], references: [id], onDelete: SetNull)
  addedById     Int?
  doi           String           @unique
  title         String
  publishedYear Int
  journal       String
  authorString  String
  author        Author[]
  review        ReviewAnswers[]
  reviewComment ReviewComments[]
}

model Author {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orcid       String?  @unique
  familyName  String
  givenName   String
  affiliation String?
  Article     Article? @relation(fields: [articleId], references: [id])
  articleId   String?
  User        User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId      Int?
}

model ReviewAnswers {
  id            Int             @id @default(autoincrement())
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  writtenBy     User?           @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  targetArticle Article?        @relation(fields: [articleId], references: [id])
  userId        Int?
  articleId     String
  question      ReviewQuestions @relation(fields: [questionId], references: [questionId])
  response      Int
  questionId    Int
  isAnonymous   Boolean         @default(false)

  @@unique([articleId, questionId, userId])
}

model ReviewComments {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId      Int?
  writtenBy   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  isAnonymous Boolean @default(false)

  articleId     String
  targetArticle Article? @relation(fields: [articleId], references: [id])

  comment String

  // Each user can have only one comment per article
  @@unique([userId, articleId])
}

model ReviewQuestions {
  questionId       Int             @id @default(autoincrement())
  surveyId         Int?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  questionText     String
  maxValue         Int?            @default(7)
  minValue         Int?            @default(1)
  minLabel         String?
  maxLabel         String?
  questionCategory String?
  review           ReviewAnswers[]
}

// model ReviewQuestionType {
//   questionTypeId Int      @id @default(autoincrement())
//   createdAt      DateTime @default(now())
//   updatedAt      DateTime @updatedAt

// }

enum Role {
  USER
  GROUP_OWNER
  ADMIN
}
